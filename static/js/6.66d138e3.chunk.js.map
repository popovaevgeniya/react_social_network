{"version":3,"sources":["components/Chat/Chat.tsx","pages/Chat/ChatPage.tsx"],"names":["wsChannel","WebSocket","Chat","react_default","a","createElement","Chat_Messages","Chat_AddMessageForm","Messages","_useState","useState","_useState2","Object","slicedToArray","messages","setMessages","useEffect","addEventListener","e","newMessages","JSON","parse","data","prevMessages","concat","toConsumableArray","style","height","overflowY","map","message","i","Chat_Message","key","userId","Message","_ref","photo","src","alt","width","borderRadius","avatar","size","shape","icon","UserOutlined","userName","AddMessageForm","TextArea","Input","es_form","name","onFinish","values","send","onFinishFailed","errorInfo","console","log","autoComplete","Item","rules","required","rows","es_button","type","htmlType","ChatPage","Chat_Chat"],"mappings":"kLAIMA,EAAY,IAAIC,UAAU,gEAQnBC,EAAiB,WAC1B,OAAOC,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAACC,EAAD,MACAH,EAAAC,EAAAC,cAACE,EAAD,QAIFC,EAAqB,WAAM,IAAAC,EACGC,mBAA4B,IAD/BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACtBK,EADsBH,EAAA,GACZI,EADYJ,EAAA,GAS7B,OAPAK,oBAAU,WACNhB,EAAUiB,iBAAiB,UAAW,SAACC,GACnC,IAAMC,EAAcC,KAAKC,MAAMH,EAAEI,MACjCP,EAAY,SAACQ,GAAD,SAAAC,OAAAZ,OAAAa,EAAA,EAAAb,CAAsBW,GAAtBX,OAAAa,EAAA,EAAAb,CAAuCO,SAExD,IAEIhB,EAAAC,EAAAC,cAAA,OAAKqB,MAAO,CAACC,OAAQ,QAASC,UAAW,SAC3Cd,EAASe,IAAI,SAACC,EAASC,GAAV,OAAgB5B,EAAAC,EAAAC,cAAC2B,EAAD,CAASF,QAASA,EAASG,IAAG,GAAAT,OAAKO,EAAL,KAAAP,OAAUM,EAAQI,OAAlB,KAAAV,OAA4BM,EAAQA,eAGlGK,EAAkD,SAAAC,GAAA,IAAEN,EAAFM,EAAEN,QAAF,OACpD3B,EAAAC,EAAAC,cAAA,WACKyB,EAAQO,MAAQlC,EAAAC,EAAAC,cAAA,OAAKiC,IAAKR,EAAQO,MAAOE,IAAI,cAAcb,MAAO,CAACc,MAAO,OAAQC,aAAc,SAC3FtC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAQC,KAAM,GAAIC,MAAM,SAASC,KAAM1C,EAAAC,EAAAC,cAACyC,EAAA,EAAD,QAC7C3C,EAAAC,EAAAC,cAAA,SAAIyB,EAAQiB,UACZ5C,EAAAC,EAAAC,cAAA,SAAIyB,EAAQA,SACZ3B,EAAAC,EAAAC,cAAA,aAIF2C,EAA2B,WAAM,IAC5BC,EAAYC,IAAZD,SAUP,OAAO9C,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WACRF,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CACIC,KAAK,iBACLC,SAXS,SAACC,GACdtD,EAAUuD,KAAKD,EAAOxB,UAWlB0B,eARe,SAACC,GACpBC,QAAQC,IAAI,UAAWF,IAQnBG,aAAa,OAEbzD,EAAAC,EAAAC,cAAC8C,EAAA,EAAKU,KAAN,CACIT,KAAK,UACLU,MAAO,CAAC,CAAEC,UAAU,EAAMjC,QAAS,gCAEnC3B,EAAAC,EAAAC,cAAC4C,EAAD,CAAUe,KAAM,KAEpB7D,EAAAC,EAAAC,cAAC8C,EAAA,EAAKU,KAAN,KACI1D,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAAQC,KAAK,UAAUC,SAAS,UAAhC,YC1DDC,UANY,WACvB,OAAOjE,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAACgE,EAAD","file":"static/js/6.66d138e3.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {Avatar, Button, Form, Input} from 'antd';\nimport {UserOutlined} from '@ant-design/icons';\n\nconst wsChannel = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\n\ntype ChatMessageType = {\n    userId: number\n    userName: string\n    photo: string\n    message: string\n}\nexport const Chat: React.FC = () => {\n    return <div>\n        <Messages/>\n        <AddMessageForm/>\n    </div>\n}\n\nconst Messages: React.FC = () => {\n    const [messages, setMessages] = useState<ChatMessageType[]>([])\n    useEffect(() => {\n        wsChannel.addEventListener('message', (e) => {\n            const newMessages = JSON.parse(e.data);\n            setMessages((prevMessages) => [...prevMessages, ...newMessages])\n        })\n    }, [])\n\n    return <div style={{height: '600px', overflowY: 'auto'}}>\n        {messages.map((message, i) => <Message message={message} key={`${i}_${message.userId}_${message.message}`}/>)}\n    </div>\n}\nconst Message: React.FC<{ message: ChatMessageType }> = ({message}) => (\n    <div>\n        {message.photo ? <img src={message.photo} alt='User avatar' style={{width: '32px', borderRadius: '6px'}}/>\n            : <Avatar size={32} shape='square' icon={<UserOutlined/>}/>}\n        <b>{message.userName}</b>\n        <p>{message.message}</p>\n        <hr/>\n    </div>\n)\n\nconst AddMessageForm: React.FC = () => {\n    const {TextArea} = Input\n\n    const onFinish = (values: any) => {\n        wsChannel.send(values.message)\n    };\n\n    const onFinishFailed = (errorInfo: any) => {\n        console.log('Failed:', errorInfo);\n    };\n\n    return <div><br/>\n        <Form\n            name=\"addMessageForm\"\n            onFinish={onFinish}\n            onFinishFailed={onFinishFailed}\n            autoComplete=\"off\"\n        >\n            <Form.Item\n                name=\"message\"\n                rules={[{ required: true, message: 'Please input your message!' }]}\n            >\n                <TextArea rows={4}/>\n            </Form.Item>\n            <Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\">\n                    Send\n                </Button>\n            </Form.Item>\n        </Form>\n    </div>\n}","import React from 'react';\nimport {Chat} from '../../components/Chat/Chat';\n\nconst ChatPage: React.FC = () => {\n    return <div>\n        <Chat />\n    </div>\n}\n\nexport default ChatPage"],"sourceRoot":""}