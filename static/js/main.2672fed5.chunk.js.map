{"version":3,"sources":["assets/images/user_icon.png","assets/images/loader.svg","components/Profile/Profile.module.css","assets/images/logo.png","components/NavBar/NavBar.module.css","components/Dialogs/Dialogs.module.css","serviceWorker.js","api/api.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","redux/users-reducer.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","components/NavBar/NavBar.tsx","utils/validators/validators.ts","components/common/FormsControls/FormsControls.tsx","components/AddMessageForm/AddMessageForm.tsx","components/Dialog/Dialog.tsx","components/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/AuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Paginator/Paginator.tsx","redux/users-selectors.ts","components/UsersSearchForm/UsersSearchForm.tsx","components/Users/Users.tsx","components/common/Preloader/Preloader.tsx","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Posts/Post/Post.tsx","components/Profile/Posts/AddPostForm/AddPostForm.tsx","components/Profile/Posts/Posts.tsx","components/Profile/Posts/PostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","index.tsx","components/Users/Users.module.css","components/common/FormsControls/FormControl.module.css","assets/images/avatar.png","components/Paginator/Paginator.module.css","components/Profile/Posts/Post/Post.module.css"],"names":["module","exports","__webpack_require__","p","content","nav","item","active","dialogs","messages","dialogItem","dialog","message","Boolean","window","location","hostname","match","ResultCodeEnum","ResultCodeForCaptchaEnum","instance","axios","create","withCredentials","baseURL","headers","API-KEY","usersAPI","requestUsers","currentPage","arguments","length","undefined","pageSize","term","friend","isFriend","concat","get","then","res","data","follow","userId","post","unfollow","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","authAPI","email","password","rememberMe","initialState","posts","id","likesCount","profile","setStatus","type","profileReducer","state","action","newPost","newPostText","Object","objectSpread2","toConsumableArray","name","text","dialogsReducer","body","newMessageBody","users","totalUsersCount","isFetching","followingInProgress","filter","actions","totalCount","count","payload","page","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","wrap","_context","prev","next","sent","items","stop","_x","apply","this","followUnfollowFlow","_ref2","_callee2","apiMethod","actionCreator","_context2","resultCode","_x2","_x3","_x4","_x5","usersReducer","map","u","followed","login","isAuth","getAuthUserData","response","_response$data","_login","Success","authReducer","initialized","appReducer","rootReducers","combineReducers","profilePage","messagesPage","usersPage","auth","form","formReducer","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","NavBar","react_default","createElement","className","s","react_router_dom","to","activeClassName","required","value","maxLengthCreator","maxLength","FormControl","_ref$meta","meta","touched","error","children","hasError","formControl","TextArea","props","input","restProps","objectWithoutProperties","FormsControls_FormControl","assign","Input","maxLength50","reduxForm","onSubmit","handleSubmit","Field","component","placeholder","validate","Dialog","path","Message","Dialogs","dialogsElements","d","components_Dialog_Dialog","key","messagesElements","m","components_Message_Message","components_AddMessageForm_AddMessageForm","sendMessage","mapStateToPropsForRedirect","connect","WrappedComponent","react_router","Paginator","totalItemsCount","_props$currentPage","_props$onPageChanged","onPageChanged","_props$portionSize","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","_useState","useState","_useState2","slicedToArray","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","onClick","cn","pageNumber","defineProperty","selectedPageNumber","getUsers","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","UsersSearchForm","React","memo","onFilterChange","useSelector","formik_esm","enableReinitialize","initialValues","String","values","setSubmitting","setTimeout","_ref3","isSubmitting","as","disabled","Users","useDispatch","history","useHistory","useEffect","searchParams","URLSearchParams","search","actualPage","actualFilter","has","Number","query","pathname","toString","UsersSearchForm_UsersSearchForm","components_Paginator_Paginator","area","src","photos","small","userPhoto","alt","photo","some","_ref4","_callee4","_context4","bind","_x7","_callee3","_context3","_x6","field","Preloader","preloader","UsersPage","pageTitle","Fragment","common_Preloader_Preloader","components_Users_Users","ProfileStatus","editMode","_this","activateEditMode","setState","deactivateEditMode","onStatusChange","e","currentTarget","prevProps","prevState","onDoubleClick","onChange","autoFocus","onBlur","Component","ProfileInfo","large","defaultPhoto","aboutMe","ProfileInfo_ProfileStatus","Post","avatar","likeCount","maxLength10","Posts","postsElements","Posts_Post_Post","Posts_AddPostForm_AddPostForm","addPost","Profile","Profile_ProfileInfo_ProfileInfo","PostsContainer","ProfileContainer","params","authorizedUserId","getUserProfile","components_Profile_Profile","withRouter","Header","logo","logout","HeaderContainer","components_Header_Header","LoginReduxForm","formSummeryError","LoginPage","formData","stopSubmit","_error","App","initializeApp","Header_HeaderContainer","components_NavBar_NavBar","render","Profile_ProfileContainer","DialogsContainer","UsersContainer","Login","promise","Promise","all","ReactDOM","react_redux_es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","selectedPage","pageButton"],"mappings":"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","file":"static/js/main.2672fed5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user_icon.13ffaa1f.png\";","module.exports = __webpack_public_path__ + \"static/media/loader.9064981b.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__2wLDD\"};","module.exports = __webpack_public_path__ + \"static/media/logo.a11bfcff.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__1FWUI\",\"item\":\"NavBar_item__2RAQQ\",\"active\":\"NavBar_active__1HRI5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"messages\":\"Dialogs_messages__1w_Up\",\"active\":\"Dialogs_active__2sQhs\",\"dialogItem\":\"Dialogs_dialogItem__1AD6j\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"message\":\"Dialogs_message__1xIDh\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\nimport {ProfileType, UserType} from '../types/types';\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {'API-KEY': '3f26be3e-65ab-4630-9892-39fd2574b842'}\n});\n\ntype GetItemsType = {\n    items: Array<UserType>\n    itemCount: number\n    totalCount: number\n    error: string | null\n}\n\nexport const usersAPI = {\n    requestUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\n        const isFriend = friend ? `&friend=${friend}` : ''\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + isFriend\n        ).then(res => res.data)\n    },\n    follow(userId: number) {\n        return instance.post<ResponseType>(`follow/${userId}`, {}).then(res => res.data)\n    },\n    unfollow(userId: number) {\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<ResponseType>\n    },\n    getProfile(userId: number) {\n        console.warn('Obsolete method. Please use profileAPI object.')\n        return profileAPI.getProfile(userId);\n    }\n}\n\nexport const profileAPI = {\n    getProfile(userId: number) {\n        return instance.get<ProfileType>(`profile/${userId}`).then(res => res.data);\n    },\n    getStatus(userId: number) {\n        return instance.get<string>(`profile/status/${userId}`).then(res => res.data);\n    },\n    updateStatus(status: string) {\n        return instance.put<ResponseType>(`profile/status`, {status}).then(res => res.data);\n    }\n}\n\nexport enum ResultCodeEnum {\n    Success = 0,\n    Error = 1\n}\n\nexport enum ResultCodeForCaptchaEnum {\n    captchaIsRequired = 10\n}\n\ntype MeResponseDataType = {\n    id: number\n    email: string\n    login: string\n}\n\ntype LoginResponseDataType = {\n    userId: number\n}\n\nexport type ResponseType<D = {}, RC = ResultCodeEnum> = {\n    data: D\n    messages: Array<string>\n    resultCode: RC\n}\n\nexport const authAPI = {\n    me() {\n        return instance.get<ResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data);\n    },\n    login(email: string, password: string, rememberMe = false) {\n        return instance.post<ResponseType<LoginResponseDataType, ResultCodeEnum | ResultCodeForCaptchaEnum>>(`auth/login`, {\n            email,\n            password,\n            rememberMe\n        }).then(res => res.data);\n    },\n    logout() {\n        return instance.delete(`auth/login`).then(res => res.data);\n    }\n}\n\n","import {profileAPI, usersAPI} from \"../api/api\";\nimport {PostType, ProfileType} from \"../types/types\";\n\nconst ADD_POST = 'ADD-POST';\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\nconst SET_STATUS = 'SET_STATUS';\n\n\nlet initialState = {\n    posts: [\n        {id: 1, message: 'Hi! How are you?', likesCount: 2},\n        {id: 2, message: 'Yoyoyoyo', likesCount: 12},\n        {id: 3, message: 'It is my first post.', likesCount: 42}\n    ] as Array<PostType>,\n    profile: null as ProfileType | null,\n    status: ''\n}\n\nexport type InitialStateType = typeof initialState\n\nconst profileReducer = (state = initialState, action: any): InitialStateType => {\n    switch (action.type) {\n        case ADD_POST:\n            let newPost = {\n                id: 5,\n                message: action.newPostText,\n                likesCount: 0\n            };\n            return {\n                ...state,\n                posts: [...state.posts, newPost]\n            }\n        case SET_USER_PROFILE:\n            return {\n                ...state,\n                profile: action.profile\n            }\n        case SET_STATUS:\n            return {\n                ...state,\n                status: action.status\n            }\n        default:\n            return state;\n    }\n}\n\ntype AddPostActionCreatorType = {\n    type: typeof ADD_POST\n    newPostText: string\n}\nexport const addPostActionCreator = (newPostText: string): AddPostActionCreatorType => ({ type: ADD_POST, newPostText })\n\ntype SetUserProfileType = {\n    type: typeof SET_USER_PROFILE\n    profile: ProfileType\n}\nexport const setUserProfile = (profile: ProfileType): SetUserProfileType => ({\n        type: SET_USER_PROFILE,\n        profile\n    })\n\n\ntype SetStatusType = {\n    type: typeof SET_STATUS\n    status: string\n}\nexport const setStatus = (status: string): SetStatusType => ({type: SET_STATUS, status})\n\n\nexport const getUserProfile = (userId: number) => async (dispatch: any) => {\n    const response = await usersAPI.getProfile(userId);\n    dispatch(setUserProfile(response));\n}\n\nexport const getStatus = (userId: number) => async (dispatch: any) => {\n    const response = await profileAPI.getStatus(userId);\n    dispatch(setStatus(response));\n}\n\nexport const updateStatus = (status: string) => async (dispatch: any) => {\n    const response = await profileAPI.updateStatus(status);\n    if (response.resultCode === 0) {\n        dispatch(setStatus(status));\n    }\n}\nexport default profileReducer;","const SEND_MESSAGE = 'SEND-MESSAGE';\n\nexport type DialogsType = {\n    id: number,\n    name: string\n}\n\nexport type MessagesType = {\n    id: number,\n    text: string\n}\n\nlet initialState = {\n    dialogs: [\n        {id: 1, name: 'Dima'},\n        {id: 2, name: 'Slava'},\n        {id: 3, name: 'Valera'},\n        {id: 4, name: 'Kolia'},\n        {id: 5, name: 'Sveta'}\n    ] as Array<DialogsType>,\n    messages: [\n        {id: 1, text: 'Hi'},\n        {id: 2, text: 'Hello'},\n        {id: 3, text: 'How are you?'},\n        {id: 4, text: 'Yo'},\n        {id: 5, text: 'Hey!'}\n    ] as Array<MessagesType>\n}\n\nexport type InitialStateType = typeof initialState\n\nconst dialogsReducer = (state = initialState, action: any): InitialStateType => {\n    switch (action.type) {\n        case SEND_MESSAGE:\n            let body = action.newMessageBody;\n            return {\n                ...state,\n                messages: [...state.messages, {id: 6, text: body}]\n            }\n        default:\n            return state;\n    }\n}\n\ntype SendMessageActionCreatorType = {\n    type: typeof SEND_MESSAGE,\n    newMessageBody: string\n}\n\nexport const sendMessage = (newMessageBody: string): SendMessageActionCreatorType => (\n    { type: SEND_MESSAGE, newMessageBody }\n)\n\nexport default dialogsReducer;","import {ResponseType, usersAPI} from '../api/api';\nimport {UserType} from '../types/types';\nimport {Dispatch} from 'redux';\nimport {BaseThunkType, InferActionsType} from './redux-store';\n\nlet initialState = {\n    users: [] as Array<UserType>,\n    pageSize: 5,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: [] as Array<number>,\n    filter: {\n        term: '',\n        friend: null as null | boolean\n    }\n}\n\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'FOLLOW':\n            return {\n                ...state,\n                users: state.users.map((u) => {\n                    if (u.id === action.userId) {\n                        return {...u, followed: true}\n                    }\n                    return u;\n                })\n            }\n        case 'UNFOLLOW':\n            return {\n                ...state,\n                users: state.users.map((u) => {\n                    if (u.id === action.userId) {\n                        return {...u, followed: false}\n                    }\n                    return u;\n                })\n            }\n        case 'SET_USERS':\n            return {\n                ...state,\n                users: action.users\n            }\n        case 'SET_CURRENT_PAGE':\n            return {\n                ...state,\n                currentPage: action.currentPage\n            }\n        case 'SET_USERS_TOTAL_COUNT':\n            return {\n                ...state,\n                totalUsersCount: action.count\n            }\n        case 'TOGGLE_IS_FETCHING':\n            return {\n                ...state,\n                isFetching: action.isFetching\n            }\n        case 'TOGGLE_IS_FOLLOWING_PROGRESS':\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id !== action.userId)\n            }\n        case 'SET_FILTER':\n            return {\n                ...state,\n                filter: action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    followSuccess: (userId: number) => ({type: 'FOLLOW', userId} as const),\n    unfollowSuccess: (userId: number) => ({type: 'UNFOLLOW', userId} as const),\n    setUsers: (users: Array<UserType>) => ({type: 'SET_USERS', users} as const),\n    setCurrentPage: (currentPage: number) => ({type: 'SET_CURRENT_PAGE', currentPage} as const),\n    setTotalUsersCount: (totalCount: number) => ({type: 'SET_USERS_TOTAL_COUNT', count: totalCount} as const),\n    setToggleFetching: (isFetching: boolean) => ({type: 'TOGGLE_IS_FETCHING', isFetching} as const),\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\n        type: 'TOGGLE_IS_FOLLOWING_PROGRESS',\n        isFetching,\n        userId\n    } as const),\n    setFilter: (filter: FilterType) => ({type: 'SET_FILTER', payload: filter} as const)\n}\n\nexport const requestUsers = (page: number, pageSize: number, filter: FilterType): ThunkType => (\n    async (dispatch) => {\n        dispatch(actions.setToggleFetching(true));\n        dispatch(actions.setCurrentPage(page));\n\n        const data = await usersAPI.requestUsers(page, pageSize, filter.term, filter.friend);\n        dispatch(actions.setToggleFetching(false));\n        dispatch(actions.setUsers(data.items));\n        dispatch(actions.setTotalUsersCount(data.totalCount));\n        dispatch(actions.setFilter(filter))\n    })\n\nconst followUnfollowFlow = async (dispatch: Dispatch<ActionsType>,\n                                  userId: number,\n                                  apiMethod: (userId: number) => Promise<ResponseType>,\n                                  actionCreator: (userId: number) => ActionsType) => {\n    dispatch(actions.toggleFollowingProgress(true, userId));\n    const response = await apiMethod(userId);\n    if (response.resultCode === 0) {\n        dispatch(actionCreator(userId));\n    }\n    dispatch(actions.toggleFollowingProgress(false, userId));\n}\n\n//thunk creator\nexport const follow = (userId: number): ThunkType => (\n    async (dispatch) => {\n        await followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess)\n    }\n)\n\n//thunk creator\nexport const unfollow = (userId: number): ThunkType => (\n    async (dispatch) => {\n        await followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\n    }\n)\n\nexport default usersReducer;\n\nexport type InitialStateType = typeof initialState\nexport type FilterType = typeof initialState.filter\ntype ActionsType = InferActionsType<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType>","import {authAPI, ResultCodeEnum} from \"../api/api\";\nimport {FormAction, stopSubmit} from \"redux-form\";\nimport {BaseThunkType, InferActionsType} from \"./redux-store\";\n\nlet initialState = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false\n}\n\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/auth/SET_USER_DATA':\n            return {\n                ...state,\n                ...action.payload\n            } as InitialStateType\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => (\n        {type: 'SN/auth/SET_USER_DATA', payload: {userId, email, login, isAuth}} as const\n    )\n}\n\n//thunk creators:\nexport const getAuthUserData = ():ThunkType => async (dispatch) => {\n    const response = await authAPI.me();\n\n    if (response.resultCode === ResultCodeEnum.Success) {\n        let {id, email, login} = response.data;\n        dispatch(actions.setAuthUserData(id, email, login, true));\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean): ThunkType => async (dispatch) => {\n    const response = await authAPI.login(email, password, rememberMe);\n\n    if (response.resultCode === ResultCodeEnum.Success)\n        dispatch(getAuthUserData());\n    else {\n        let messages = response.messages.length > 0 ? response.messages[0] : 'Something is wrong!';\n        dispatch(stopSubmit('login', {_error: messages}));\n    }\n}\n\nexport const logout = (): ThunkType => async (dispatch) => {\n    const response = await authAPI.logout();\n\n    if (response.resultCode === ResultCodeEnum.Success)\n        dispatch(actions.setAuthUserData(null, null, null, false));\n}\n\nexport default authReducer;\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsType<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","import {getAuthUserData} from \"./auth-reducer\";\nimport {InferActionsType} from \"./redux-store\";\n\nlet initialState = {\n    initialized: false\n}\n\n\nconst actions = {\n    initializedSuccess: () => ({type: 'SOCIAL_NETWORK/APP/INITIALIZED_SUCCESS'} as const)\n}\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsType<typeof actions>\n\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SOCIAL_NETWORK/APP/INITIALIZED_SUCCESS':\n            return {\n                ...state,\n                initialized: true\n            }\n        default:\n            return state;\n    }\n}\n\n//thunk-a\nexport const initializeApp = () => (dispatch: any) => {\n    let promise = dispatch(getAuthUserData());\n    Promise.all([promise]).then(() => {\n            dispatch(actions.initializedSuccess());\n        });\n}\n\nexport default appReducer;","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\"\nimport profileReducer from \"./profile-reducer\"\nimport dialogsReducer from \"./dialogs-reducer\"\nimport usersReducer from \"./users-reducer\"\nimport authReducer from \"./auth-reducer\"\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk'\nimport { reducer as formReducer } from 'redux-form'\nimport appReducer from \"./app-reducer\"\n\nlet rootReducers = combineReducers({\n    profilePage: profileReducer,\n    messagesPage: dialogsReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer\n})\n\nexport type InferActionsType<T> = T extends {[keys: string]: (...args: any[]) => infer U } ? U : never\n\ntype RootReducersType = typeof rootReducers;\nexport type AppSateType = ReturnType<RootReducersType>\n\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppSateType, unknown, A>\n\n// @ts-ignore\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose\nlet store = createStore(rootReducers, composeEnhancers(applyMiddleware(thunkMiddleware)))\n\n// @ts-ignore\nwindow.__store__ = store\n\nexport default store","import React from \"react\";\nimport s from './NavBar.module.css';\nimport {NavLink} from \"react-router-dom\";\n\nconst NavBar: React.FC = () => {\n    return(\n        <nav className={s.nav}>\n            <ul>\n                <div className={s.item}>\n                    <NavLink to='/profile' activeClassName={s.active}>Profile</NavLink>\n                </div>\n                <div className={`${s.item}`}>\n                    <NavLink to='/dialogs' activeClassName={s.active}>Massages</NavLink>\n                </div>\n                <div className={s.item}>\n                    <NavLink to='/users' activeClassName={s.active}>Users</NavLink>\n                </div>\n                <div className={s.item}>\n                    News\n                </div>\n                <div className={s.item}>\n                    Music\n                </div>\n                <div className={s.item}>\n                    Settings\n                </div>\n            </ul>\n        </nav>\n    )\n}\n\nexport default NavBar;","type FieldValidatorType = (value: string) => string | undefined\n\nexport const required: FieldValidatorType = (value) => {\n    if (value) return undefined;\n    return 'Field is required';\n}\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n    if (value && value.length > 30) return `Max length is ${maxLength} symbols`;\n    return undefined;\n}","import React, {FC, ReactNode} from \"react\";\nimport s from './FormControl.module.css';\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps\n    children: ReactNode\n}\n\nconst FormControl: FC<FormControlPropsType> = ({ meta: {touched, error}, children}) => {\n    const hasError = touched && error;\n    return <div className={`${s.formControl} ${hasError ? s.error : ''}`}>\n        <div>\n            {children}\n        </div>\n        {hasError && <span>{error}</span>}\n    </div>\n}\n\nexport const TextArea: FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props;\n   return <FormControl {...props}>\n       <textarea {...input} {...restProps}/>\n   </FormControl>\n}\n\nexport const Input: FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}>\n        <input {...input} {...restProps}/>\n    </FormControl>\n}\n\n//type StringKeys = Extract<keyof LoginFormValuesType, string>","import {maxLengthCreator, required} from \"../../utils/validators/validators\";\nimport React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {TextArea} from \"../common/FormsControls/FormsControls\";\nimport {NewMessageFormType} from '../Dialogs/Dialogs'\n\ntype PropsType = {}\n\nconst maxLength50 = maxLengthCreator(50);\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormType, PropsType> & PropsType> = (props) => {\n    return <form onSubmit={props.handleSubmit}>\n        <div>\n            <Field component={TextArea} name='newMessageBody' placeholder='Enter your message' validate={[required, maxLength50]}/>\n        </div>\n        <div>\n            <button>Send</button>\n        </div>\n    </form>\n}\n\nexport default reduxForm<NewMessageFormType>({form: 'dialogAddMessageForm'})(AddMessageForm);\n","import React from \"react\";\nimport {DialogsType} from \"../../redux/dialogs-reducer\";\nimport s from \"../Dialogs/Dialogs.module.css\";\nimport {NavLink} from \"react-router-dom\";\n\nconst Dialog: React.FC<DialogsType> = (props) => {\n    let path = '/dialogs/' + props.id\n    return(\n        <div className={s.dialog + '' + s.active}>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n}\n\nexport default Dialog;","import React from \"react\";\nimport {MessagesType} from \"../../redux/dialogs-reducer\";\nimport s from \"../Dialogs/Dialogs.module.css\";\n\nconst Message: React.FC<MessagesType> = (props) => (\n    <div className={s.message}>{props.text}</div>\n)\n\nexport default Message;","import React from \"react\";\nimport s from './Dialogs.module.css';\nimport {InitialStateType} from \"../../redux/dialogs-reducer\";\nimport AddMessageForm from '../AddMessageForm/AddMessageForm'\nimport Dialog from \"../Dialog/Dialog\";\nimport Message from \"../Message/Message\";\n\ntype PropsType = {\n    messagesPage: InitialStateType\n    sendMessage: (messageText: string) => void\n}\n\nexport type NewMessageFormType = {\n    newMessageBody: string\n}\n\nconst Dialogs: React.FC<PropsType> = (props) => {\n    let state = props.messagesPage;\n    let dialogsElements = state.dialogs.map((d) => <Dialog name={d.name} id={d.id} key={d.id}/>);\n    let messagesElements = state.messages.map((m) => <Message text={m.text} id={m.id} key={m.id}/>);\n\n    let addNewMessage = (value: NewMessageFormType) => {\n        props.sendMessage(value.newMessageBody);\n    }\n    return(\n        <div className={s.dialogs}>\n            <div className={s.dialogItem}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <div>{messagesElements}</div>\n                <AddMessageForm onSubmit={addNewMessage}/>\n            </div>\n        </div>\n    )\n}\n\nexport default Dialogs;","import {Redirect} from \"react-router-dom\";\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport {AppSateType} from \"../redux/redux-store\";\n\nconst mapStateToPropsForRedirect = (state: AppSateType) => ({\n    isAuth: state.auth.isAuth\n});\n\ntype MapPropsType = {\n    isAuth: boolean\n}\n\ntype DispatchPropsType = {}\n\nexport function withAuthRedirect<WCP> (WrappedComponent: React.ComponentType<WCP>) {\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\n        let {isAuth, ...restProps} = props;\n        if (!isAuth) return <Redirect to={'/login'}/>;\n        return <WrappedComponent {...restProps as WCP}/>\n    }\n\n    return connect<MapPropsType, DispatchPropsType, WCP, AppSateType>(mapStateToPropsForRedirect)(RedirectComponent);\n}","import {sendMessage} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../hoc/AuthRedirect\";\nimport {compose} from \"redux\";\nimport {AppSateType} from \"../../redux/redux-store\";\nimport React from \"react\";\n\nconst mapStateToProps = (state: AppSateType) => {\n    return {\n        messagesPage: state.messagesPage,\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport default compose<React.ComponentType>(connect(mapStateToProps, {sendMessage}), withAuthRedirect)(Dialogs);","import React, {useState} from \"react\";\nimport styles from './Paginator.module.css'\nimport cn from 'classnames';\n\ntype PropsType = {\n    totalItemsCount: number\n    pageSize: number\n    currentPage?: number\n    onPageChanged?: (pageNumber: number) => void\n    portionSize?: number\n}\n\nconst Paginator: React.FC<PropsType> = (props) => {\n    const {\n        totalItemsCount,\n        pageSize,\n        currentPage = 1,\n        onPageChanged = () => {},\n        portionSize = 10\n    } = props;\n    const pagesCount = Math.ceil(totalItemsCount / pageSize);\n\n    let pages: Array<number> = [];\n    for(let i=1; i<=pagesCount; i++) {\n        pages.push(i)\n    }\n\n    const portionCount = Math.ceil(pagesCount / portionSize);\n    const [portionNumber, setPortionNumber] = useState(1);\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n    const rightPortionPageNumber = portionNumber * portionSize;\n\n    return (\n        <div className={styles.paginator}>\n            {portionNumber > 1 &&\n                <button onClick={()=>setPortionNumber(portionNumber-1)}>PREV</button>}\n            {pages\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\n                .map((p)=>(\n                    <span\n                        className={cn(styles.pageNumber, {[styles.selectedPageNumber]: currentPage===p})}\n                        key={p}\n                        onClick={()=>onPageChanged(p)}\n                    >{p}</span>\n                ))\n            }\n            {portionCount > portionNumber &&\n                <button onClick={()=>setPortionNumber(portionNumber+1)}>NEXT</button>}\n        </div>\n    )\n}\n\nexport default Paginator;","import {createSelector} from \"reselect\";\nimport {AppSateType} from \"./redux-store\";\n\nexport const getUsersSelector = (state: AppSateType) => {\n    return state.usersPage.users;\n}\nexport const getUsers = createSelector(getUsersSelector, (users) => {\n    //если не будет меняться в стэйте getUsers, то эта функция не будет перезапускаться\n    return users.filter(u => true);\n})\n\nexport const getPageSize = (state: AppSateType) => {\n    return state.usersPage.pageSize;\n}\n\nexport const getTotalUsersCount = (state: AppSateType) => {\n    return state.usersPage.totalUsersCount;\n}\n\nexport const getCurrentPage = (state: AppSateType) => {\n    return state.usersPage.currentPage;\n}\n\nexport const getIsFetching = (state: AppSateType) => {\n    return state.usersPage.isFetching;\n}\n\nexport const getFollowingInProgress = (state: AppSateType) => {\n    return state.usersPage.followingInProgress;\n}\n\nexport const getUsersFilter = (state: AppSateType) => (\n    state.usersPage.filter\n)\n","import {Field, Form, Formik} from 'formik';\nimport React from 'react';\nimport {FilterType} from '../../redux/users-reducer';\nimport {useSelector} from 'react-redux';\nimport {getUsersFilter} from '../../redux/users-selectors';\n\ntype PropsType = {\n    onFilterChange: (filter: FilterType) => void\n}\n\ntype FormType = {\n    term: string\n    friend: 'null' | 'true' | 'false'\n}\n\nconst UsersSearchForm: React.FC<PropsType> = React.memo(({onFilterChange}) => {\n    const filter = useSelector(getUsersFilter)\n    const usersSearchFormValidate = (values: any) => {\n        return {};\n    }\n\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\n        const filter: FilterType = {\n            term: values.term,\n            friend: values.friend === 'null' ? null : values.friend === 'true'\n        }\n        onFilterChange(filter)\n        setTimeout(() => {\n            setSubmitting(false)\n        }, 400);\n    }\n\n    return (\n        <Formik\n            enableReinitialize\n            initialValues={{term: filter.term, friend: String(filter.friend)} as FormType}\n            validate={usersSearchFormValidate}\n            onSubmit={submit}\n        >\n            {({isSubmitting}) => (\n                <Form>\n                    <Field type=\"text\" name=\"term\"/>\n                    <Field name=\"friend\" as=\"select\">\n                        <option value=\"null\">All</option>\n                        <option value=\"true\">Only followed</option>\n                        <option value=\"false\">Only unfollowed</option>\n                    </Field>\n                    <button type=\"submit\" disabled={isSubmitting}>\n                        Find\n                    </button>\n                </Form>\n            )}\n        </Formik>\n    )\n})\n\nexport default UsersSearchForm","import React, {useEffect} from 'react';\nimport s from './Users.module.css';\nimport userPhoto from '../../assets/images/user_icon.png';\nimport {NavLink, useHistory} from 'react-router-dom';\nimport Paginator from '../Paginator/Paginator';\nimport UsersSearchForm from '../UsersSearchForm/UsersSearchForm';\nimport {FilterType, follow, requestUsers, unfollow} from '../../redux/users-reducer';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {\n    getCurrentPage,\n    getFollowingInProgress,\n    getPageSize,\n    getTotalUsersCount,\n    getUsers,\n    getUsersFilter\n} from '../../redux/users-selectors';\n\ntype QueryParamsType = {\n    term?: string\n    friend?: string\n    page?: string\n}\n\nconst Users: React.FC = () => {\n    const users = useSelector(getUsers)\n    const totalUsersCount = useSelector(getTotalUsersCount)\n    const currentPage = useSelector(getCurrentPage)\n    const pageSize = useSelector(getPageSize)\n    const filter = useSelector(getUsersFilter)\n    const followingInProgress = useSelector(getFollowingInProgress)\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    useEffect(() => {\n            const searchParams = new URLSearchParams(history.location.search)\n            let actualPage = currentPage\n            let actualFilter = filter\n\n            if (searchParams.has('page')) {\n                actualPage = Number(searchParams.get('page'))\n            }\n            if (searchParams.has('term')) {\n                actualFilter = {...actualFilter, term: searchParams.get('term') as string}\n            }\n            switch (searchParams.get('friend')) {\n                case 'null':\n                    actualFilter = {...actualFilter, friend: null}\n                    break\n                case 'true':\n                    actualFilter = {...actualFilter, friend: true}\n                    break\n                case 'false':\n                    actualFilter = {...actualFilter, friend: false}\n                    break\n            }\n\n            dispatch(requestUsers(actualPage, pageSize, actualFilter))\n        },\n        [])\n\n    useEffect(() => {\n        const query: QueryParamsType = {}\n        if (!!filter.term) query.term = filter.term\n        if (filter.friend !== null) query.friend = String(filter.friend)\n        if (currentPage !== 1) query.page = String(currentPage)\n\n        history.push({\n            pathname: '/users',\n            search: new URLSearchParams(query).toString()\n        })\n    }, [filter, currentPage])\n\n    const onPageChanged = (pageNumber: number) => {\n        dispatch(requestUsers(pageNumber, pageSize, filter))\n    }\n\n    const onFilterChange = (filter: FilterType) => {\n        dispatch(requestUsers(1, pageSize, filter))\n    }\n\n    return (\n        <div>\n            <UsersSearchForm onFilterChange={onFilterChange}/>\n            <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\n                       pageSize={pageSize} totalItemsCount={totalUsersCount}/>\n            {\n                users.map(u => <div key={u.id} className={s.item}>\n                    <span className={s.area}>\n                        <div>\n                            <NavLink to={'/profile/' + u.id}>\n                                <img src={u.photos.small != null ? u.photos.small : userPhoto} alt=\"user_photo\"\n                                     className={s.photo}/>\n                            </NavLink>\n                        </div>\n                        <div> {u.followed\n                            ? <button disabled={followingInProgress.some(id => id === u.id)} onClick={() => {\n                                dispatch(unfollow(u.id))\n                            }}>Unfollow</button>\n                            : <button disabled={followingInProgress.some(id => id === u.id)} onClick={() => {\n                                dispatch(follow(u.id))\n                            }}>Follow</button>\n                        } </div>\n                    </span>\n                    <span className={s.area + '' + s.field}>\n                        <span className={s.area}>\n                            <div>{u.name}</div>\n                            <div>{u.status}</div>\n                        </span>\n                    </span>\n                </div>)\n            }\n        </div>\n    )\n}\n\nexport default Users;","import preloader from \"../../../assets/images/loader.svg\";\nimport React from \"react\";\n\nlet Preloader = () => {\n    return <img src={preloader} alt='preloader'/>\n}\nexport default Preloader;","import {useSelector} from 'react-redux';\nimport React from 'react';\nimport Users from './Users';\nimport Preloader from '../common/Preloader/Preloader';\nimport {\n    getIsFetching,\n} from '../../redux/users-selectors';\n\ntype UsersPagePropsType = {\n    pageTitle: string\n}\nconst UsersPage: React.FC<UsersPagePropsType> = ({ pageTitle }) => {\n    const isFetching = useSelector(getIsFetching)\n    return (\n        <>\n            <h2>{pageTitle}</h2>\n            {isFetching ? <Preloader/> : null}\n            <Users />\n        </>\n    )\n}\n\nexport default UsersPage","import React, {ChangeEvent} from \"react\";\n\ntype PropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\ntype StateType = {\n    editMode: boolean\n    status: string\n}\n\nclass ProfileStatus extends React.Component<PropsType, StateType> {\n    state = {\n        editMode: false,\n        status: this.props.status\n    }\n\n    activateEditMode = () => {\n       this.setState(\n           {editMode: true}\n           )\n    }\n    deactivateEditMode = () => {\n        this.setState(\n            {editMode: false}\n        );\n        this.props.updateStatus(this.state.status);\n    }\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            status: e.currentTarget.value\n        });\n    }\n    componentDidUpdate(prevProps: PropsType, prevState: StateType) {\n        if(prevProps.status !== this.props.status) {\n            this.setState({\n                status: this.props.status\n            })\n        }\n    }\n\n    render() {\n       return <div>\n           {!this.state.editMode &&\n               <div>\n                   <span onDoubleClick={this.activateEditMode}>{this.props.status || '-----'}</span>\n               </div>\n           }\n           {this.state.editMode &&\n               <div>\n                    <input  onChange={this.onStatusChange} autoFocus={true} onBlur={this.deactivateEditMode} value={this.state.status}/>\n               </div>\n           }\n        </div>\n    }\n}\n\nexport default ProfileStatus;","import React from \"react\";\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport defaultPhoto from \"../../../assets/images/avatar.png\";\nimport ProfileStatus from \"./ProfileStatus\"\nimport {ProfileType} from \"../../../types/types\";\n\ntype PropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n}\n\nconst ProfileInfo: React.FC<PropsType> = (props) => {\n    if (!props.profile){\n        return <Preloader />\n    }\n    return(\n        <div>\n            <img src={!props.profile.photos.large ? defaultPhoto : props.profile.photos.large} alt='avatar'/>\n            <span>{props.profile.aboutMe}</span>\n            <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\n        </div>\n    )\n}\n\nexport default ProfileInfo;","import React from \"react\";\nimport s from './Post.module.css';\nimport avatar from \"../../../../assets/images/avatar.png\";\n\ntype PropsType = {\n    message: string\n    likeCount: number\n}\n\nconst Post: React.FC<PropsType> = (props) => {\n    return(\n        <div className={s.item}>\n            <img className={s.item} src={avatar} alt='avatar'/>\n            {props.message}\n            <div>\n                <span>Like {props.likeCount}</span>\n            </div>\n        </div>\n    )\n}\n\nexport default Post;","import {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {TextArea} from \"../../../common/FormsControls/FormsControls\";\nimport React from \"react\";\n\ntype PropsType = {}\n\nexport type AddPostFormValuesType = {\n    newPostText: string\n}\n\nconst maxLength10 = maxLengthCreator(10);\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\n    return <form onSubmit={props.handleSubmit}>\n        <div>\n            <Field component={TextArea} name='newPostText' placeholder='Write something'\n                   validate={[required, maxLength10]}/>\n        </div>\n        <div>\n            <button>\n                Add post\n            </button>\n        </div>\n    </form>\n}\nexport default reduxForm<AddPostFormValuesType, PropsType>({form: 'profileAddNewPostForm'})(AddPostForm);","import React from \"react\";\nimport Post from \"./Post/Post\";\nimport AddPostForm, {AddPostFormValuesType} from \"./AddPostForm/AddPostForm\";\nimport {PostType} from \"../../../types/types\";\n\nexport type MapPropsType = {\n    posts: Array<PostType>\n}\nexport type DispatchPropsType = {\n    addPost: (newPostText: string) => void\n}\n\nconst Posts: React.FC<MapPropsType & DispatchPropsType> = (props) => {\n    let postsElements = props.posts.map((p) =>\n        <Post message={p.message} likeCount={p.likesCount} key={p.id}/>\n        );\n\n    let onAddPost = (value: AddPostFormValuesType) => {\n        props.addPost(value.newPostText);\n    }\n\n    return(\n        <div className='posts'>\n            My posts\n            <AddPostForm onSubmit={onAddPost}/>\n            {postsElements}\n        </div>\n    )\n}\n\nexport default Posts;","import {addPostActionCreator} from \"../../../redux/profile-reducer\";\nimport {connect} from \"react-redux\";\nimport Posts, {DispatchPropsType, MapPropsType} from \"./Posts\";\nimport {AppSateType} from \"../../../redux/redux-store\";\n\nconst mapStateToProps = (state: AppSateType) => {\n    return {\n        posts: state.profilePage.posts\n    }\n}\n\nexport default connect<MapPropsType, DispatchPropsType, {}, AppSateType>(mapStateToProps, {addPost: addPostActionCreator})(Posts);","import React from \"react\";\nimport s from './Profile.module.css';\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport PostsContainer from \"./Posts/PostsContainer\";\nimport {ProfileType} from \"../../types/types\";\n\ntype PropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n}\n\nconst Profile: React.FC<PropsType> = (props) => {\n    return(\n        <div className={s.content}>\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\n            <PostsContainer />\n        </div>\n    )\n}\n\nexport default Profile;","import React from \"react\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profile-reducer\";\nimport {RouteComponentProps, withRouter} from \"react-router\";\nimport {compose} from \"redux\";\nimport {AppSateType} from \"../../redux/redux-store\";\n\nconst mapStateToProps = (state: AppSateType) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n});\n\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\n\ntype DispatchPropsType = {\n    getUserProfile: (userId: number) => void\n    getStatus: (userId: number) => void\n    updateStatus: (status: string) => void\n}\n\n// props type for react-router\ntype PathParamsType = {\n    userId: string,\n}\n\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\n\nclass ProfileContainer extends React.Component<PropsType> {\n\n    componentDidMount() {\n        //explicit typification (явная типизация) and + is conversion to string (+ это преобразование в строку)\n        let userId: number | null = +this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n               // todo: may be replace push with redirect\n               this.props.history.push('/login');\n            }\n        }\n\n        if (!userId) {\n            console.error('ID should be exists in URI params or in state authorizedUserId')\n        } else {\n            this.props.getUserProfile(userId);\n            this.props.getStatus(userId);\n        }\n    }\n\n    render() {\n        return <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/>\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\n    withRouter\n)(ProfileContainer);","import React from \"react\";\nimport './Header.css';\nimport logo from \"../../assets/images/logo.png\";\nimport {NavLink} from \"react-router-dom\";\n\nexport type MapPropsType = {\n    isAuth: boolean\n    login: string | null\n}\n\nexport type DispatchPropsType = {\n    logout: () => void\n}\n\n\nconst Header: React.FC<MapPropsType & DispatchPropsType> = (props) => {\n    return(\n        <header className='header'>\n            <img src={logo} alt='logo'/>\n            <div className='loginBlock'>\n                {props.isAuth\n                    ? <div>{props.login} <button onClick={props.logout}>Logout</button> </div>\n                    : <NavLink to={'/login'}>Login</NavLink>}\n            </div>\n        </header>\n    )\n}\n\nexport default Header;","import React from \"react\";\nimport Header, {DispatchPropsType, MapPropsType} from \"./Header\";\nimport {logout} from \"../../redux/auth-reducer\";\nimport {connect} from \"react-redux\";\nimport {AppSateType} from \"../../redux/redux-store\";\n\nclass HeaderContainer extends React.Component<MapPropsType & DispatchPropsType> {\n    render() {\n        return <Header {...this.props}/>\n    }\n}\nconst mapStateToProps = (state: AppSateType) => ({\n    isAuth: state.auth.isAuth,\n    login: state.auth.login\n});\n\nexport default connect<MapPropsType, DispatchPropsType, {}, AppSateType>(mapStateToProps, {logout})(HeaderContainer);","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Input} from \"../common/FormsControls/FormsControls\";\nimport {required} from \"../../utils/validators/validators\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport {login} from \"../../redux/auth-reducer\";\nimport {Redirect} from \"react-router\";\nimport s from './../common/FormsControls/FormControl.module.css';\nimport {AppSateType} from \"../../redux/redux-store\";\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType>> = ({handleSubmit, error}) => {\n    return <form onSubmit={handleSubmit}>\n        <div>\n            <Field placeholder='E-mail' component={Input} type=\"email\" name='email' validate={[required]}/>\n        </div>\n        <div>\n            <Field placeholder='Password' component={Input} type=\"password\" name='password' validate={[required]}/>\n        </div>\n        <div>\n            <Field type=\"checkbox\" component={Input} name='rememberMe'/> Remember me\n        </div>\n        {error && <div className={s.formSummeryError}>\n            {error}\n        </div>}\n        <div>\n            <button>Login</button>\n        </div>\n    </form>\n};\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType>({ form: 'login' })(LoginForm);\n\ntype LoginFormValuesType = {\n    rememberMe: boolean\n    password: string\n    email: string\n}\n\nconst LoginPage: React.FC = () => {\n    const isAuth = useSelector((state: AppSateType) => state.auth.isAuth)\n    const dispatch = useDispatch()\n    const onSubmit = (formData: LoginFormValuesType) => {\n        dispatch(login(formData.email, formData.password, formData.rememberMe))\n    };\n    if(isAuth) return <Redirect to='/profile'/>\n    return <div>\n        <h1>LOGIN</h1>\n        <LoginReduxForm onSubmit={onSubmit}/>\n    </div>\n};\n\n\nexport default LoginPage","import React from 'react';\nimport './App.css';\nimport NavBar from \"./components/NavBar/NavBar\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Route} from \"react-router-dom\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport UsersPage from \"./components/Users/UsersContainer\";\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport LoginPage from \"./components/Login/Login\";\nimport {connect} from \"react-redux\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport {AppSateType} from \"./redux/redux-store\";\n\nconst mapStateToProps = (state: AppSateType) => ({\n    initialized: state.app.initialized\n})\n\ntype PropsType = ReturnType<typeof mapStateToProps>\n\ntype DispatchPropsType = {\n    initializeApp: () => void\n}\n\nclass App extends React.Component<PropsType & DispatchPropsType> {\n    componentDidMount() {\n        this.props.initializeApp();\n    }\n\n    render() {\n        if(!this.props.initialized){\n            return <Preloader/>\n        }\n        return (\n            <BrowserRouter>\n                <div className=\"app-wrapper\">\n                    <HeaderContainer/>\n                    <NavBar/>\n                    <div className='app-wrapper-content'>\n                        <Route\n                            path='/profile/:userId?'\n                            render={() =>\n                                <ProfileContainer/>\n                            }\n                        />\n                        <Route\n                            path='/dialogs'\n                            render={() =>\n                                <DialogsContainer/>\n                            }\n                        />\n                        <Route\n                            path='/users'\n                            render={() =>\n                                <UsersPage pageTitle=\"Users page\"/>\n                            }\n                        />\n                        <Route\n                            path='/login'\n                            render={() =>\n                                <LoginPage/>\n                            }\n                        />\n                    </div>\n                </div>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, {initializeApp})(App);\n","import * as serviceWorker from './serviceWorker';\nimport store from \"./redux/redux-store\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App\n        />\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"Users_photo__2hOPg\",\"area\":\"Users_area__3s_qe\",\"field\":\"Users_field__13ip4\",\"selectedPage\":\"Users_selectedPage__J63sh\",\"pageButton\":\"Users_pageButton__1ZjBo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControl_formControl__2tDgs\",\"error\":\"FormControl_error__2w4xO\",\"formSummeryError\":\"FormControl_formSummeryError__3KpqV\"};","module.exports = __webpack_public_path__ + \"static/media/avatar.e2dc1ebf.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__3w-2P\",\"pageNumber\":\"Paginator_pageNumber__1RptP\",\"selectedPageNumber\":\"Paginator_selectedPageNumber__2NFdL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2EmvQ\"};"],"sourceRoot":""}