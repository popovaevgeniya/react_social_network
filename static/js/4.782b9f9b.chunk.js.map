{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/AddMessageForm/AddMessageForm.tsx","components/Dialog/Dialog.tsx","components/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/AuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","dialogs","messages","active","dialogItem","dialog","message","maxLength50","maxLengthCreator","reduxForm","form","props","react_default","a","createElement","onSubmit","handleSubmit","Field","component","TextArea","name","placeholder","validate","required","es_button","type","Dialog","path","id","className","s","react_router_dom","to","Message","text","Dialogs","state","messagesPage","dialogsElements","map","d","components_Dialog_Dialog","key","messagesElements","m","components_Message_Message","components_AddMessageForm_AddMessageForm","value","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","WrappedComponent","restProps","Object","objectWithoutProperties","react_router"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,QAAA,yBAAAC,SAAA,0BAAAC,OAAA,wBAAAC,WAAA,4BAAAC,OAAA,wBAAAC,QAAA,+JCQZC,EAAcC,YAAiB,IAYtBC,cAA8B,CAACC,KAAM,wBAArCD,CAXgF,SAACE,GAC5F,OAAOC,EAAAC,EAAAC,cAAA,QAAMC,SAAUJ,EAAMK,cACzBJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOC,UAAWC,IAAUC,KAAK,iBAAiBC,YAAY,qBAAqBC,SAAU,CAACC,IAAUhB,MAE5GK,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAQC,KAAK,WAAb,oBCFGC,EATuB,SAACf,GACnC,IAAIgB,EAAO,YAAchB,EAAMiB,GAC/B,OACIhB,EAAAC,EAAAC,cAAA,OAAKe,UAAWC,IAAEzB,OAAS,GAAKyB,IAAE3B,QAC9BS,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAASC,GAAIL,GAAOhB,EAAMS,QCDvBa,EAJyB,SAACtB,GAAD,OACpCC,EAAAC,EAAAC,cAAA,OAAKe,UAAWC,IAAExB,SAAUK,EAAMuB,OCgCvBC,EArBsB,SAACxB,GAClC,IAAIyB,EAAQzB,EAAM0B,aACdC,EAAkBF,EAAMnC,QAAQsC,IAAI,SAACC,GAAD,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,CAAQrB,KAAMoB,EAAEpB,KAAMQ,GAAIY,EAAEZ,GAAIc,IAAKF,EAAEZ,OAClFe,EAAmBP,EAAMlC,SAASqC,IAAI,SAACK,GAAD,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,CAASX,KAAMU,EAAEV,KAAMN,GAAIgB,EAAEhB,GAAIc,IAAKE,EAAEhB,OAKzF,OACIhB,EAAAC,EAAAC,cAAA,OAAKe,UAAWC,IAAE7B,SACdW,EAAAC,EAAAC,cAAA,OAAKe,UAAWC,IAAE1B,YACbkC,GAEL1B,EAAAC,EAAAC,cAAA,OAAKe,UAAWC,IAAE5B,UACdU,EAAAC,EAAAC,cAAA,WAAM6B,GACN/B,EAAAC,EAAAC,cAACgC,EAAD,CAAgB/B,SAVR,SAACgC,GACjBpC,EAAMqC,YAAYD,EAAME,+CCjB1BC,EAA6B,SAACd,GAAD,MAAyB,CACxDe,OAAQf,EAAMgB,KAAKD,qBCSRE,sBAA6BC,YAPpB,SAAClB,GACrB,MAAO,CACHC,aAAcD,EAAMC,aACpBc,OAAQf,EAAMgB,KAAKD,SAI0C,CAACH,kBDA/D,SAAgCO,GAOnC,OAAOD,YAA2DJ,EAA3DI,CAN+D,SAAC3C,GAAU,IACxEwC,EAAwBxC,EAAxBwC,OAAWK,EAD6DC,OAAAC,EAAA,EAAAD,CAChD9C,EADgD,YAE7E,OAAKwC,EACEvC,EAAAC,EAAAC,cAACyC,EAAqBC,GADT5C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAU3B,GAAI,cCH3BqB,CAAwFlB","file":"static/js/4.782b9f9b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"messages\":\"Dialogs_messages__1w_Up\",\"active\":\"Dialogs_active__2sQhs\",\"dialogItem\":\"Dialogs_dialogItem__1AD6j\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"message\":\"Dialogs_message__1xIDh\"};","import {maxLengthCreator, required} from \"../../utils/validators/validators\";\nimport React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {TextArea} from \"../common/FormsControls/FormsControls\";\nimport {NewMessageFormType} from '../Dialogs/Dialogs'\nimport {Button} from 'antd';\n\ntype PropsType = {}\n\nconst maxLength50 = maxLengthCreator(50);\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormType, PropsType> & PropsType> = (props) => {\n    return <form onSubmit={props.handleSubmit}>\n        <div>\n            <Field component={TextArea} name='newMessageBody' placeholder='Enter your message' validate={[required, maxLength50]}/>\n        </div>\n        <div>\n            <Button type=\"primary\">Send</Button>\n        </div>\n    </form>\n}\n\nexport default reduxForm<NewMessageFormType>({form: 'dialogAddMessageForm'})(AddMessageForm);\n","import React from \"react\";\nimport {DialogsType} from \"../../redux/dialogs-reducer\";\nimport s from \"../Dialogs/Dialogs.module.css\";\nimport {NavLink} from \"react-router-dom\";\n\nconst Dialog: React.FC<DialogsType> = (props) => {\n    let path = '/dialogs/' + props.id\n    return(\n        <div className={s.dialog + '' + s.active}>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n}\n\nexport default Dialog;","import React from \"react\";\nimport {MessagesType} from \"../../redux/dialogs-reducer\";\nimport s from \"../Dialogs/Dialogs.module.css\";\n\nconst Message: React.FC<MessagesType> = (props) => (\n    <div className={s.message}>{props.text}</div>\n)\n\nexport default Message;","import React from \"react\";\nimport s from './Dialogs.module.css';\nimport {InitialStateType} from \"../../redux/dialogs-reducer\";\nimport AddMessageForm from '../AddMessageForm/AddMessageForm'\nimport Dialog from \"../Dialog/Dialog\";\nimport Message from \"../Message/Message\";\n\ntype PropsType = {\n    messagesPage: InitialStateType\n    sendMessage: (messageText: string) => void\n}\n\nexport type NewMessageFormType = {\n    newMessageBody: string\n}\n\nconst Dialogs: React.FC<PropsType> = (props) => {\n    let state = props.messagesPage;\n    let dialogsElements = state.dialogs.map((d) => <Dialog name={d.name} id={d.id} key={d.id}/>);\n    let messagesElements = state.messages.map((m) => <Message text={m.text} id={m.id} key={m.id}/>);\n\n    let addNewMessage = (value: NewMessageFormType) => {\n        props.sendMessage(value.newMessageBody);\n    }\n    return(\n        <div className={s.dialogs}>\n            <div className={s.dialogItem}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <div>{messagesElements}</div>\n                <AddMessageForm onSubmit={addNewMessage}/>\n            </div>\n        </div>\n    )\n}\n\nexport default Dialogs;","import {Redirect} from \"react-router-dom\";\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport {AppSateType} from \"../redux/redux-store\";\n\nconst mapStateToPropsForRedirect = (state: AppSateType) => ({\n    isAuth: state.auth.isAuth\n});\n\ntype MapPropsType = {\n    isAuth: boolean\n}\n\ntype DispatchPropsType = {}\n\nexport function withAuthRedirect<WCP> (WrappedComponent: React.ComponentType<WCP>) {\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\n        let {isAuth, ...restProps} = props;\n        if (!isAuth) return <Redirect to={'/login'}/>;\n        return <WrappedComponent {...restProps as WCP}/>\n    }\n\n    return connect<MapPropsType, DispatchPropsType, WCP, AppSateType>(mapStateToPropsForRedirect)(RedirectComponent);\n}","import {sendMessage} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../hoc/AuthRedirect\";\nimport {compose} from \"redux\";\nimport {AppSateType} from \"../../redux/redux-store\";\nimport React from \"react\";\n\nconst mapStateToProps = (state: AppSateType) => {\n    return {\n        messagesPage: state.messagesPage,\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport default compose<React.ComponentType>(connect(mapStateToProps, {sendMessage}), withAuthRedirect)(Dialogs);"],"sourceRoot":""}